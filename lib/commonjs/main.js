import { GithubActionLogger } from "./external/github-action-logger.js";
import { ZodValidatorAdapter } from "./lib/adapters/zod-validator-adapter.js";
import { GithubActionIO } from "./external/github-action-i-o.js";
import { IoInputRetriever } from "./lib/adapters/io-input-retriever.js";
import { setFailed } from "@actions/core";
import { history, historyEntry } from "./lib/input.js";
import { SimpleRenderService } from "./lib/simple-render-service.js";
import { SimpleTableGenerator } from "./lib/simple-table-generator.js";
import { Kore } from "@kirinnee/core";
import { App } from "./lib/main.js";
import { stringToOption } from "./lib/util.js";
import { CodeQualityReportConverter } from "./lib/converter/code-quality-report-converter.js";
import { DocumentationConverter } from "./lib/converter/documentation-converter.js";
import { TestResultConverter } from "./lib/converter/test-result-converter.js";
import { TestCoverageConverter } from "./lib/converter/test-coverage-converter.js";
const core = new Kore();
core.ExtendPrimitives();
const log = new GithubActionLogger();
const historyValidator = new ZodValidatorAdapter(history);
const historyEntryValidator = new ZodValidatorAdapter(historyEntry);
const io = new GithubActionIO();
const input = new IoInputRetriever(io, historyEntryValidator, historyValidator);
const converters = [
    new CodeQualityReportConverter(),
    new DocumentationConverter(),
    new TestResultConverter(),
    new TestCoverageConverter(),
];
const tableGen = new SimpleTableGenerator(converters, core);
const service = new SimpleRenderService(converters, tableGen);
const app = new App(input, service, io);
await app.run().match({
    none: async () => {
        log.info("✅ Successfully extracted metadata");
    },
    some: async (errs) => {
        log.error("❌ Failed to extract metadata");
        for (const err of errs) {
            setFailed(err);
            const messages = await stringToOption(err?.stack).match({
                none: ["❌ No stacktrace found!"],
                some: (stacktrace) => stacktrace.split("\n"),
            });
            for (const m of messages) {
                log.error(m);
            }
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDckUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNwRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUVuRixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUNyQyxNQUFNLGdCQUFnQixHQUFHLElBQUksbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDMUQsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7QUFDaEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUNoRixNQUFNLFVBQVUsR0FBZ0I7SUFDOUIsSUFBSSwwQkFBMEIsRUFBRTtJQUNoQyxJQUFJLHNCQUFzQixFQUFFO0lBQzVCLElBQUksbUJBQW1CLEVBQUU7SUFDekIsSUFBSSxxQkFBcUIsRUFBRTtDQUM1QixDQUFDO0FBQ0YsTUFBTSxRQUFRLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDOUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUV4QyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDcEIsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2YsR0FBRyxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDRCxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQWEsRUFBRSxFQUFFO1FBQzVCLEdBQUcsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUMxQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUN0QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixNQUFNLFFBQVEsR0FBRyxNQUFNLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUN0RCxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDaEMsSUFBSSxFQUFFLENBQUMsVUFBa0IsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7YUFDckQsQ0FBQyxDQUFDO1lBQ0gsS0FBSyxNQUFNLENBQUMsSUFBSSxRQUFRLEVBQUU7Z0JBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDZDtTQUNGO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdpdGh1YkFjdGlvbkxvZ2dlciB9IGZyb20gXCIuL2V4dGVybmFsL2dpdGh1Yi1hY3Rpb24tbG9nZ2VyLmpzXCI7XG5pbXBvcnQgeyBab2RWYWxpZGF0b3JBZGFwdGVyIH0gZnJvbSBcIi4vbGliL2FkYXB0ZXJzL3pvZC12YWxpZGF0b3ItYWRhcHRlci5qc1wiO1xuaW1wb3J0IHsgR2l0aHViQWN0aW9uSU8gfSBmcm9tIFwiLi9leHRlcm5hbC9naXRodWItYWN0aW9uLWktby5qc1wiO1xuaW1wb3J0IHsgSW9JbnB1dFJldHJpZXZlciB9IGZyb20gXCIuL2xpYi9hZGFwdGVycy9pby1pbnB1dC1yZXRyaWV2ZXIuanNcIjtcbmltcG9ydCB7IHNldEZhaWxlZCB9IGZyb20gXCJAYWN0aW9ucy9jb3JlXCI7XG5pbXBvcnQgeyBoaXN0b3J5LCBoaXN0b3J5RW50cnkgfSBmcm9tIFwiLi9saWIvaW5wdXQuanNcIjtcbmltcG9ydCB7IFNpbXBsZVJlbmRlclNlcnZpY2UgfSBmcm9tIFwiLi9saWIvc2ltcGxlLXJlbmRlci1zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyBTaW1wbGVUYWJsZUdlbmVyYXRvciB9IGZyb20gXCIuL2xpYi9zaW1wbGUtdGFibGUtZ2VuZXJhdG9yLmpzXCI7XG5pbXBvcnQgeyBLb3JlIH0gZnJvbSBcIkBraXJpbm5lZS9jb3JlXCI7XG5pbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tIFwiLi9saWIvaW50ZXJmYWNlL2NvbnZlcnRlci5qc1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vbGliL21haW4uanNcIjtcbmltcG9ydCB7IHN0cmluZ1RvT3B0aW9uIH0gZnJvbSBcIi4vbGliL3V0aWwuanNcIjtcbmltcG9ydCB7IENvZGVRdWFsaXR5UmVwb3J0Q29udmVydGVyIH0gZnJvbSBcIi4vbGliL2NvbnZlcnRlci9jb2RlLXF1YWxpdHktcmVwb3J0LWNvbnZlcnRlci5qc1wiO1xuaW1wb3J0IHsgRG9jdW1lbnRhdGlvbkNvbnZlcnRlciB9IGZyb20gXCIuL2xpYi9jb252ZXJ0ZXIvZG9jdW1lbnRhdGlvbi1jb252ZXJ0ZXIuanNcIjtcbmltcG9ydCB7IFRlc3RSZXN1bHRDb252ZXJ0ZXIgfSBmcm9tIFwiLi9saWIvY29udmVydGVyL3Rlc3QtcmVzdWx0LWNvbnZlcnRlci5qc1wiO1xuaW1wb3J0IHsgVGVzdENvdmVyYWdlQ29udmVydGVyIH0gZnJvbSBcIi4vbGliL2NvbnZlcnRlci90ZXN0LWNvdmVyYWdlLWNvbnZlcnRlci5qc1wiO1xuXG5jb25zdCBjb3JlID0gbmV3IEtvcmUoKTtcbmNvcmUuRXh0ZW5kUHJpbWl0aXZlcygpO1xuY29uc3QgbG9nID0gbmV3IEdpdGh1YkFjdGlvbkxvZ2dlcigpO1xuY29uc3QgaGlzdG9yeVZhbGlkYXRvciA9IG5ldyBab2RWYWxpZGF0b3JBZGFwdGVyKGhpc3RvcnkpO1xuY29uc3QgaGlzdG9yeUVudHJ5VmFsaWRhdG9yID0gbmV3IFpvZFZhbGlkYXRvckFkYXB0ZXIoaGlzdG9yeUVudHJ5KTtcbmNvbnN0IGlvID0gbmV3IEdpdGh1YkFjdGlvbklPKCk7XG5jb25zdCBpbnB1dCA9IG5ldyBJb0lucHV0UmV0cmlldmVyKGlvLCBoaXN0b3J5RW50cnlWYWxpZGF0b3IsIGhpc3RvcnlWYWxpZGF0b3IpO1xuY29uc3QgY29udmVydGVyczogQ29udmVydGVyW10gPSBbXG4gIG5ldyBDb2RlUXVhbGl0eVJlcG9ydENvbnZlcnRlcigpLFxuICBuZXcgRG9jdW1lbnRhdGlvbkNvbnZlcnRlcigpLFxuICBuZXcgVGVzdFJlc3VsdENvbnZlcnRlcigpLFxuICBuZXcgVGVzdENvdmVyYWdlQ29udmVydGVyKCksXG5dO1xuY29uc3QgdGFibGVHZW4gPSBuZXcgU2ltcGxlVGFibGVHZW5lcmF0b3IoY29udmVydGVycywgY29yZSk7XG5jb25zdCBzZXJ2aWNlID0gbmV3IFNpbXBsZVJlbmRlclNlcnZpY2UoY29udmVydGVycywgdGFibGVHZW4pO1xuY29uc3QgYXBwID0gbmV3IEFwcChpbnB1dCwgc2VydmljZSwgaW8pO1xuXG5hd2FpdCBhcHAucnVuKCkubWF0Y2goe1xuICBub25lOiBhc3luYyAoKSA9PiB7XG4gICAgbG9nLmluZm8oXCLinIUgU3VjY2Vzc2Z1bGx5IGV4dHJhY3RlZCBtZXRhZGF0YVwiKTtcbiAgfSxcbiAgc29tZTogYXN5bmMgKGVycnM6IEVycm9yW10pID0+IHtcbiAgICBsb2cuZXJyb3IoXCLinYwgRmFpbGVkIHRvIGV4dHJhY3QgbWV0YWRhdGFcIik7XG4gICAgZm9yIChjb25zdCBlcnIgb2YgZXJycykge1xuICAgICAgc2V0RmFpbGVkKGVycik7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IHN0cmluZ1RvT3B0aW9uKGVycj8uc3RhY2spLm1hdGNoKHtcbiAgICAgICAgbm9uZTogW1wi4p2MIE5vIHN0YWNrdHJhY2UgZm91bmQhXCJdLFxuICAgICAgICBzb21lOiAoc3RhY2t0cmFjZTogc3RyaW5nKSA9PiBzdGFja3RyYWNlLnNwbGl0KFwiXFxuXCIpLFxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IG0gb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgbG9nLmVycm9yKG0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn0pO1xuIl19