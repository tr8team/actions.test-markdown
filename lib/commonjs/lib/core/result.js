import { UnwrapError } from "./error.js";
import { KOption } from "./option.js";
// Creates a new instance of `Result` as the `err` variant.
/**
 * @template T,X
 * @param error - error to be converted to a Result
 * @returns {Result<T,X>} - new instance of `Result` as the `err` variant
 */
function Err(error) {
    return new KResult((async () => {
        const err = await error;
        return ["err", err];
    })());
}
// Creates a new instance of `Result` as the `ok` variant.
/**
 * @template T,X
 * @param val - value to be converted to a Result
 * @returns {Result<T,X>} - new instance of `Result` as the `ok` variant
 */
function Ok(val) {
    return new KResult((async () => {
        const v = await val;
        return ["ok", v];
    })());
}
class Res {
    // Resolve the promise of a result, Promise<Result<T, E>> to Result<T,E> without async/await
    /**
     * @template T,E
     * @param p - promise of a result to resolve
     * @returns {Result<T,E>} - resolved result
     */
    static fromAsync(p) {
        return new KResult((async () => {
            const r = await p;
            const isOk = await r.isOk();
            if (isOk) {
                const ok = await r.unwrap();
                return Promise.resolve(["ok", ok]);
            }
            else {
                const err = await r.unwrapErr();
                return Promise.resolve(["err", err]);
            }
        })());
    }
    // Create a Result from async function
    /**
     * @template T,E
     * @param fn - function that results in a Result, asynchronous
     * @returns {Result<T,E>} - resolved result
     */
    static async(fn) {
        return Res.fromAsync(fn());
    }
    // takes in a list of results and returns a new result with a list of ok values if all results are ok or a list of error values if at least one result is an error
    /**
     * @template
     * @param i - list of results
     */
    static all(...i) {
        const closure = async () => {
            const ok = [];
            const err = [];
            const r = i.map(async (e) => {
                const isOk = await e.isOk();
                if (isOk) {
                    const okR = await e.unwrap();
                    return ["ok", okR];
                }
                else {
                    const errR = await e.unwrapErr();
                    return ["err", errR];
                }
            });
            const a = await Promise.all(r);
            for (const [t, v] of a) {
                if (t === "ok") {
                    ok.push(v);
                }
                else {
                    err.push(v);
                }
            }
            if (err.length > 0) {
                return Err(err);
            }
            return Ok(ok);
        };
        return Res.fromAsync(closure());
    }
}
class KResult {
    value;
    constructor(value) {
        this.value = value;
    }
    andThen(fn) {
        const wrapped = async () => {
            const [type, val] = await this.value;
            if (type === "err") {
                return [type, val];
            }
            else {
                const mapped = await fn(val);
                const mType = await mapped.isOk();
                if (mType) {
                    const okVal = await Promise.resolve(mapped.unwrap());
                    return ["ok", okVal];
                }
                else {
                    const errVal = await Promise.resolve(mapped.unwrapErr());
                    return ["err", errVal];
                }
            }
        };
        return new KResult(wrapped());
    }
    async isOk() {
        const [type] = await this.value;
        return type === "ok";
    }
    async isErr() {
        const [type] = await this.value;
        return type === "err";
    }
    async unwrap() {
        const [type, val] = await this.value;
        if (type === "ok") {
            return val;
        }
        throw new UnwrapError("Failed to unwrap", "result", "Expected Ok got Error");
    }
    async unwrapErr() {
        const [type, val] = await this.value;
        if (type === "err") {
            return val;
        }
        throw new UnwrapError("Failed to unwrap", "result", "Expected Err got Ok");
    }
    map(mapper) {
        return new KResult((async () => {
            const [type, val] = await this.value;
            if (type === "ok") {
                const mapped = await mapper(val);
                return ["ok", mapped];
            }
            else {
                return ["err", val];
            }
        })());
    }
    mapErr(mapper) {
        return new KResult((async () => {
            const [type, val] = await this.value;
            if (type === "err") {
                const err = await mapper(val);
                return ["err", err];
            }
            else {
                return [type, val];
            }
        })());
    }
    async native() {
        const [, val] = await this.value;
        return val;
    }
    async match(fn) {
        const [type, val] = await this.value;
        if (type === "ok") {
            return Promise.resolve(fn.ok(val));
        }
        else {
            return Promise.resolve(fn.err(val));
        }
    }
    async unwrapOr(i) {
        const [type, val] = await this.value;
        if (type === "ok") {
            return val;
        }
        else {
            if (typeof i === "function") {
                const f = i;
                return f(val);
            }
            else {
                return Promise.resolve(i);
            }
        }
    }
    err() {
        const closure = async () => {
            const [t, v] = await this.value;
            if (t === "err") {
                return ["some", v];
            }
            else {
                return ["none", null];
            }
        };
        return new KOption(closure());
    }
    exec(sideEffect, mapper = (e) => {
        if (e instanceof Error) {
            return Promise.resolve(e);
        }
        else {
            return Promise.resolve(new Error(JSON.stringify(e)));
        }
    }) {
        const closure = async () => {
            const [t, v] = await this.value;
            if (t === "err") {
                const err = await mapper(v);
                return [t, err];
            }
            else {
                try {
                    await sideEffect(v);
                }
                catch (e) {
                    if (e instanceof Error) {
                        return ["err", e];
                    }
                    else if (typeof e === "string") {
                        return ["err", new Error(e)];
                    }
                    else {
                        return ["err", new Error(JSON.stringify(e))];
                    }
                }
                return [t, v];
            }
        };
        return new KResult(closure());
    }
    ok() {
        const closure = async () => {
            const [t, v] = await this.value;
            if (t === "ok") {
                return ["some", v];
            }
            else {
                return ["none", null];
            }
        };
        return new KOption(closure());
    }
    run(sideEffect) {
        return new KResult((async () => {
            const [t, v] = await this.value;
            if (t === "err") {
                return [t, v];
            }
            else {
                await sideEffect(v);
                return [t, v];
            }
        })());
    }
}
export { Err, Ok, Res, KResult };
//# sourceMappingURL=data:application/json;base64,
