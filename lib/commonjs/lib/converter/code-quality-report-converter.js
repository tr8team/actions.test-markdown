import { None, Some } from "../core/option.js";
import { emoji, resultToColor, resultToMarkdown } from "../util.js";
class CodeQualityReportConverter {
    convertHeader(header) {
        if (header.data.type === "code-quality") {
            const f = emoji(header.data.result);
            const h = `## ${f}  ${header.name}\n`;
            const result = `
        **Quality Rating**: ${header.data.qualityRating}\\
`;
            const policy = resultToMarkdown(header.data.resultDetails);
            return Some(`
${h}
Report: [Code Quality](${header.url})
${result}
${policy}
`);
        }
        return None();
    }
    convertTable(table) {
        if (table.data.type === "code-quality") {
            const color = resultToColor(table.data.result);
            const d = table.data;
            return Some(`[![badge](https://img.shields.io/badge/quality` +
                `-${d.qualityRating}` +
                `-${color})](${table.url})`);
        }
        return None();
    }
    convertBadge(badge) {
        if (badge.data.type === "code-quality") {
            const color = resultToColor(badge.data.result);
            const d = badge.data;
            const n = encodeURIComponent(badge.name);
            return Some(`[![badge](https://img.shields.io/badge/${n}` +
                `-${d.qualityRating}` +
                `-${color})](${badge.url})`);
        }
        return None();
    }
}
export { CodeQualityReportConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1xdWFsaXR5LXJlcG9ydC1jb252ZXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbnZlcnRlci9jb2RlLXF1YWxpdHktcmVwb3J0LWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFVLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXBFLE1BQU0sMEJBQTBCO0lBQzlCLGFBQWEsQ0FBQyxNQUFtQjtRQUMvQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFBRTtZQUN2QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7WUFDdEMsTUFBTSxNQUFNLEdBQUc7OEJBQ1MsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhO0NBQ3RELENBQUM7WUFDSSxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzNELE9BQU8sSUFBSSxDQUFDO0VBQ2hCLENBQUM7eUJBQ3NCLE1BQU0sQ0FBQyxHQUFHO0VBQ2pDLE1BQU07RUFDTixNQUFNO0NBQ1AsQ0FBQyxDQUFDO1NBQ0U7UUFDRCxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBa0I7UUFDN0IsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLEVBQUU7WUFDdEMsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNyQixPQUFPLElBQUksQ0FDVCxnREFBZ0Q7Z0JBQzlDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRTtnQkFDckIsSUFBSSxLQUFLLE1BQU0sS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUM5QixDQUFDO1NBQ0g7UUFDRCxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBa0I7UUFDN0IsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLEVBQUU7WUFDdEMsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNyQixNQUFNLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekMsT0FBTyxJQUFJLENBQ1QsMENBQTBDLENBQUMsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFO2dCQUNyQixJQUFJLEtBQUssTUFBTSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQzlCLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL2NvbnZlcnRlci5qc1wiO1xuaW1wb3J0IHsgRGF0YUVsZW1lbnQgfSBmcm9tIFwiLi4vaW5wdXQuanNcIjtcbmltcG9ydCB7IE5vbmUsIE9wdGlvbiwgU29tZSB9IGZyb20gXCIuLi9jb3JlL29wdGlvbi5qc1wiO1xuaW1wb3J0IHsgZW1vamksIHJlc3VsdFRvQ29sb3IsIHJlc3VsdFRvTWFya2Rvd24gfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuXG5jbGFzcyBDb2RlUXVhbGl0eVJlcG9ydENvbnZlcnRlciBpbXBsZW1lbnRzIENvbnZlcnRlciB7XG4gIGNvbnZlcnRIZWFkZXIoaGVhZGVyOiBEYXRhRWxlbWVudCk6IE9wdGlvbjxzdHJpbmc+IHtcbiAgICBpZiAoaGVhZGVyLmRhdGEudHlwZSA9PT0gXCJjb2RlLXF1YWxpdHlcIikge1xuICAgICAgY29uc3QgZiA9IGVtb2ppKGhlYWRlci5kYXRhLnJlc3VsdCk7XG4gICAgICBjb25zdCBoID0gYCMjICR7Zn0gICR7aGVhZGVyLm5hbWV9XFxuYDtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGBcbiAgICAgICAgKipRdWFsaXR5IFJhdGluZyoqOiAke2hlYWRlci5kYXRhLnF1YWxpdHlSYXRpbmd9XFxcXFxuYDtcbiAgICAgIGNvbnN0IHBvbGljeSA9IHJlc3VsdFRvTWFya2Rvd24oaGVhZGVyLmRhdGEucmVzdWx0RGV0YWlscyk7XG4gICAgICByZXR1cm4gU29tZShgXG4ke2h9XG5SZXBvcnQ6IFtDb2RlIFF1YWxpdHldKCR7aGVhZGVyLnVybH0pXG4ke3Jlc3VsdH1cbiR7cG9saWN5fVxuYCk7XG4gICAgfVxuICAgIHJldHVybiBOb25lKCk7XG4gIH1cblxuICBjb252ZXJ0VGFibGUodGFibGU6IERhdGFFbGVtZW50KTogT3B0aW9uPHN0cmluZz4ge1xuICAgIGlmICh0YWJsZS5kYXRhLnR5cGUgPT09IFwiY29kZS1xdWFsaXR5XCIpIHtcbiAgICAgIGNvbnN0IGNvbG9yID0gcmVzdWx0VG9Db2xvcih0YWJsZS5kYXRhLnJlc3VsdCk7XG4gICAgICBjb25zdCBkID0gdGFibGUuZGF0YTtcbiAgICAgIHJldHVybiBTb21lKFxuICAgICAgICBgWyFbYmFkZ2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvcXVhbGl0eWAgK1xuICAgICAgICAgIGAtJHtkLnF1YWxpdHlSYXRpbmd9YCArXG4gICAgICAgICAgYC0ke2NvbG9yfSldKCR7dGFibGUudXJsfSlgLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIE5vbmUoKTtcbiAgfVxuXG4gIGNvbnZlcnRCYWRnZShiYWRnZTogRGF0YUVsZW1lbnQpOiBPcHRpb248c3RyaW5nPiB7XG4gICAgaWYgKGJhZGdlLmRhdGEudHlwZSA9PT0gXCJjb2RlLXF1YWxpdHlcIikge1xuICAgICAgY29uc3QgY29sb3IgPSByZXN1bHRUb0NvbG9yKGJhZGdlLmRhdGEucmVzdWx0KTtcbiAgICAgIGNvbnN0IGQgPSBiYWRnZS5kYXRhO1xuICAgICAgY29uc3QgbiA9IGVuY29kZVVSSUNvbXBvbmVudChiYWRnZS5uYW1lKTtcbiAgICAgIHJldHVybiBTb21lKFxuICAgICAgICBgWyFbYmFkZ2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvJHtufWAgK1xuICAgICAgICAgIGAtJHtkLnF1YWxpdHlSYXRpbmd9YCArXG4gICAgICAgICAgYC0ke2NvbG9yfSldKCR7YmFkZ2UudXJsfSlgLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIE5vbmUoKTtcbiAgfVxufVxuXG5leHBvcnQgeyBDb2RlUXVhbGl0eVJlcG9ydENvbnZlcnRlciB9O1xuIl19