import { None, Some } from "../core/option.js";
import { emoji, resultToColor, resultToMarkdown } from "../util.js";
class TestCoverageConverter {
    convertHeader(header) {
        if (header.data.type === "test-coverage") {
            const f = emoji(header.data.result);
            const h = `## ${f}  ${header.name}\n`;
            const coverage = `
| Type | Coverage |
| ---- | -------- |
| Line | ${header.data.line.toFixed(2)}% |
| Statement | ${header.data.statement.toFixed(2)}% |
| Function | ${header.data.function.toFixed(2)}% |
| Branch | ${header.data.branch.toFixed(2)}% |
`;
            const diff = header.data.delta;
            const dEmoji = (d) => (d > 0 ? "‚è´" : "‚è¨");
            const delta = diff == null
                ? coverage
                : `
| Type | Coverage | Delta |
| ---- | -------- | ----- |
| Line | ${header.data.line.toFixed(2)}% | ${diff.line.toFixed(2)}% ${dEmoji(diff.line)} |
| Statement | ${header.data.statement.toFixed(2)}% | ${diff.statement.toFixed(2)}% ${dEmoji(diff.statement)} |
| Function | ${header.data.function.toFixed(2)}% | ${diff.function.toFixed(2)}% ${dEmoji(diff.function)} |
| Branch | ${header.data.branch.toFixed(2)}% | ${diff.branch.toFixed(2)}% ${dEmoji(diff.branch)} |
`;
            const policy = resultToMarkdown(header.data.resultDetails);
            return Some(`
${h}
Report: [Coverage](${header.url})
${delta}
${policy}
`);
        }
        return None();
    }
    convertTable(table) {
        if (table.data.type === "test-coverage") {
            const color = resultToColor(table.data.result);
            const d = table.data;
            // ‚ò≤ 100% | ‚à¨ 90.2% | üúâ 25.5%
            return Some(`[![badge](https://img.shields.io/badge/coverage` +
                `-%E2%98%B2%20${d.statement.toFixed(1)}%25%20%7C%20%E2%88%AC%20${d.function.toFixed(1)}%25%20%7C%20%F0%9F%9C%89%20${d.branch.toFixed(1)}%25` +
                `-${color})](${table.url})`);
        }
        return None();
    }
}
export { TestCoverageConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1jb3ZlcmFnZS1jb252ZXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbnZlcnRlci90ZXN0LWNvdmVyYWdlLWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsSUFBSSxFQUFVLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSXBFLE1BQU0scUJBQXFCO0lBQ3pCLGFBQWEsQ0FBQyxNQUFtQjtRQUMvQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRTtZQUN4QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7WUFDdEMsTUFBTSxRQUFRLEdBQUc7OztXQUdaLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7ZUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0NBQ3pDLENBQUM7WUFDSSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMvQixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sS0FBSyxHQUNULElBQUksSUFBSSxJQUFJO2dCQUNWLENBQUMsQ0FBQyxRQUFRO2dCQUNWLENBQUMsQ0FBQzs7O1dBR0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FDOUQsSUFBSSxDQUFDLElBQUksQ0FDVjtnQkFDRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQy9ELENBQUMsQ0FDRixLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2VBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FDNUQsQ0FBQyxDQUNGLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUN0RCxDQUFDLENBQ0YsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztDQUNwQyxDQUFDO1lBRUksTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMzRCxPQUFPLElBQUksQ0FBQztFQUNoQixDQUFDO3FCQUNrQixNQUFNLENBQUMsR0FBRztFQUM3QixLQUFLO0VBQ0wsTUFBTTtDQUNQLENBQUMsQ0FBQztTQUNFO1FBQ0QsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWtCO1FBQzdCLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBZSxFQUFFO1lBQ3ZDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDckIsOEJBQThCO1lBQzlCLE9BQU8sSUFBSSxDQUNULGlEQUFpRDtnQkFDakQsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUNqQyxDQUFDLENBQ0YsMkJBQTJCLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUM1QyxDQUFDLENBQ0YsOEJBQThCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLO2dCQUN2RCxJQUFJLEtBQUssTUFBTSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQzVCLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhRWxlbWVudCB9IGZyb20gXCIuLi9pbnB1dC5qc1wiO1xuaW1wb3J0IHsgTm9uZSwgT3B0aW9uLCBTb21lIH0gZnJvbSBcIi4uL2NvcmUvb3B0aW9uLmpzXCI7XG5pbXBvcnQgeyBlbW9qaSwgcmVzdWx0VG9Db2xvciwgcmVzdWx0VG9NYXJrZG93biB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5pbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL2NvbnZlcnRlci5qc1wiO1xuXG5cbmNsYXNzIFRlc3RDb3ZlcmFnZUNvbnZlcnRlciBpbXBsZW1lbnRzIENvbnZlcnRlciB7XG4gIGNvbnZlcnRIZWFkZXIoaGVhZGVyOiBEYXRhRWxlbWVudCk6IE9wdGlvbjxzdHJpbmc+IHtcbiAgICBpZiAoaGVhZGVyLmRhdGEudHlwZSA9PT0gXCJ0ZXN0LWNvdmVyYWdlXCIpIHtcbiAgICAgIGNvbnN0IGYgPSBlbW9qaShoZWFkZXIuZGF0YS5yZXN1bHQpO1xuICAgICAgY29uc3QgaCA9IGAjIyAke2Z9ICAke2hlYWRlci5uYW1lfVxcbmA7XG4gICAgICBjb25zdCBjb3ZlcmFnZSA9IGBcbnwgVHlwZSB8IENvdmVyYWdlIHxcbnwgLS0tLSB8IC0tLS0tLS0tIHxcbnwgTGluZSB8ICR7aGVhZGVyLmRhdGEubGluZS50b0ZpeGVkKDIpfSUgfFxufCBTdGF0ZW1lbnQgfCAke2hlYWRlci5kYXRhLnN0YXRlbWVudC50b0ZpeGVkKDIpfSUgfFxufCBGdW5jdGlvbiB8ICR7aGVhZGVyLmRhdGEuZnVuY3Rpb24udG9GaXhlZCgyKX0lIHxcbnwgQnJhbmNoIHwgJHtoZWFkZXIuZGF0YS5icmFuY2gudG9GaXhlZCgyKX0lIHxcbmA7XG4gICAgICBjb25zdCBkaWZmID0gaGVhZGVyLmRhdGEuZGVsdGE7XG4gICAgICBjb25zdCBkRW1vamkgPSAoZDogbnVtYmVyKSA9PiAoZCA+IDAgPyBcIuKPq1wiIDogXCLij6xcIik7XG4gICAgICBjb25zdCBkZWx0YSA9XG4gICAgICAgIGRpZmYgPT0gbnVsbFxuICAgICAgICAgID8gY292ZXJhZ2VcbiAgICAgICAgICA6IGBcbnwgVHlwZSB8IENvdmVyYWdlIHwgRGVsdGEgfFxufCAtLS0tIHwgLS0tLS0tLS0gfCAtLS0tLSB8XG58IExpbmUgfCAke2hlYWRlci5kYXRhLmxpbmUudG9GaXhlZCgyKX0lIHwgJHtkaWZmLmxpbmUudG9GaXhlZCgyKX0lICR7ZEVtb2ppKFxuICAgICAgICAgICAgICBkaWZmLmxpbmVcbiAgICAgICAgICAgICl9IHxcbnwgU3RhdGVtZW50IHwgJHtoZWFkZXIuZGF0YS5zdGF0ZW1lbnQudG9GaXhlZCgyKX0lIHwgJHtkaWZmLnN0YXRlbWVudC50b0ZpeGVkKFxuICAgICAgICAgICAgICAyXG4gICAgICAgICAgICApfSUgJHtkRW1vamkoZGlmZi5zdGF0ZW1lbnQpfSB8XG58IEZ1bmN0aW9uIHwgJHtoZWFkZXIuZGF0YS5mdW5jdGlvbi50b0ZpeGVkKDIpfSUgfCAke2RpZmYuZnVuY3Rpb24udG9GaXhlZChcbiAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgKX0lICR7ZEVtb2ppKGRpZmYuZnVuY3Rpb24pfSB8XG58IEJyYW5jaCB8ICR7aGVhZGVyLmRhdGEuYnJhbmNoLnRvRml4ZWQoMil9JSB8ICR7ZGlmZi5icmFuY2gudG9GaXhlZChcbiAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgKX0lICR7ZEVtb2ppKGRpZmYuYnJhbmNoKX0gfFxuYDtcblxuICAgICAgY29uc3QgcG9saWN5ID0gcmVzdWx0VG9NYXJrZG93bihoZWFkZXIuZGF0YS5yZXN1bHREZXRhaWxzKTtcbiAgICAgIHJldHVybiBTb21lKGBcbiR7aH1cblJlcG9ydDogW0NvdmVyYWdlXSgke2hlYWRlci51cmx9KVxuJHtkZWx0YX1cbiR7cG9saWN5fVxuYCk7XG4gICAgfVxuICAgIHJldHVybiBOb25lKCk7XG4gIH1cblxuICBjb252ZXJ0VGFibGUodGFibGU6IERhdGFFbGVtZW50KTogT3B0aW9uPHN0cmluZz4ge1xuICAgIGlmICh0YWJsZS5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiKSB7XG4gICAgICBjb25zdCBjb2xvciA9IHJlc3VsdFRvQ29sb3IodGFibGUuZGF0YS5yZXN1bHQpO1xuICAgICAgY29uc3QgZCA9IHRhYmxlLmRhdGE7XG4gICAgICAvLyDimLIgMTAwJSB8IOKIrCA5MC4yJSB8IPCfnIkgMjUuNSVcbiAgICAgIHJldHVybiBTb21lKFxuICAgICAgICBgWyFbYmFkZ2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvY292ZXJhZ2VgICtcbiAgICAgICAgYC0lRTIlOTglQjIlMjAke2Quc3RhdGVtZW50LnRvRml4ZWQoXG4gICAgICAgICAgMVxuICAgICAgICApfSUyNSUyMCU3QyUyMCVFMiU4OCVBQyUyMCR7ZC5mdW5jdGlvbi50b0ZpeGVkKFxuICAgICAgICAgIDFcbiAgICAgICAgKX0lMjUlMjAlN0MlMjAlRjAlOUYlOUMlODklMjAke2QuYnJhbmNoLnRvRml4ZWQoMSl9JTI1YCArXG4gICAgICAgIGAtJHtjb2xvcn0pXSgke3RhYmxlLnVybH0pYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIE5vbmUoKTtcbiAgfVxufVxuXG5leHBvcnQgeyBUZXN0Q292ZXJhZ2VDb252ZXJ0ZXIgfTtcbiJdfQ==
