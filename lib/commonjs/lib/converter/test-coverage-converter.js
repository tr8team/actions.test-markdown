import { None, Some } from "../core/option.js";
import { emoji, resultToColor, resultToMarkdown } from "../util.js";
class TestCoverageConverter {
    convertHeader(header) {
        if (header.data.type === "test-coverage") {
            const f = emoji(header.data.result);
            const h = `## ${f}  ${header.name}\n`;
            const coverage = `
| Type | Coverage |
| ---- | -------- |
| Line | ${header.data.line.toFixed(2)}% |
| Statement | ${header.data.statement.toFixed(2)}% |
| Function | ${header.data.function.toFixed(2)}% |
| Branch | ${header.data.branch.toFixed(2)}% |
`;
            const diff = header.data.delta;
            const dEmoji = (d) => (d > 0 ? "‚è´" : "‚è¨");
            const delta = diff == null
                ? coverage
                : `
| Type | Coverage | Delta |
| ---- | -------- | ----- |
| Line | ${header.data.line.toFixed(2)}% | ${diff.line.toFixed(2)}% ${dEmoji(diff.line)} |
| Statement | ${header.data.statement.toFixed(2)}% | ${diff.statement.toFixed(2)}% ${dEmoji(diff.statement)} |
| Function | ${header.data.function.toFixed(2)}% | ${diff.function.toFixed(2)}% ${dEmoji(diff.function)} |
| Branch | ${header.data.branch.toFixed(2)}% | ${diff.branch.toFixed(2)}% ${dEmoji(diff.branch)} |
`;
            const policy = resultToMarkdown(header.data.resultDetails);
            return Some(`
${h}
Report: [Coverage](${header.url})
${delta}
${policy}
`);
        }
        return None();
    }
    convertTable(table) {
        if (table.data.type === "test-coverage") {
            const color = resultToColor(table.data.result);
            const d = table.data;
            // ‚ò≤ 100% | ‚à¨ 90.2% | üúâ 25.5%
            return Some(`[![badge](https://img.shields.io/badge/coverage` +
                `-%E2%98%B2%20${d.statement.toFixed(1)}%25%20%7C%20%E2%88%AC%20${d.function.toFixed(1)}%25%20%7C%20%F0%9F%9C%89%20${d.branch.toFixed(1)}%25` +
                `-${color})](${table.url})`);
        }
        return None();
    }
    convertBadge(badge) {
        if (badge.data.type === "test-coverage") {
            const color = resultToColor(badge.data.result);
            const d = badge.data;
            // ‚ò≤ 100% | ‚à¨ 90.2% | üúâ 25.5%
            return Some(`[![badge](https://img.shields.io/badge/${badge.name}` +
                `-%E2%98%B2%20${d.statement.toFixed(1)}%25%20%7C%20%E2%88%AC%20${d.function.toFixed(1)}%25%20%7C%20%F0%9F%9C%89%20${d.branch.toFixed(1)}%25` +
                `-${color})](${badge.url})`);
        }
        return None();
    }
}
export { TestCoverageConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1jb3ZlcmFnZS1jb252ZXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvbnZlcnRlci90ZXN0LWNvdmVyYWdlLWNvbnZlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsSUFBSSxFQUFVLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBR3BFLE1BQU0scUJBQXFCO0lBQ3pCLGFBQWEsQ0FBQyxNQUFtQjtRQUMvQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRTtZQUN4QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7WUFDdEMsTUFBTSxRQUFRLEdBQUc7OztXQUdaLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7ZUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0NBQ3pDLENBQUM7WUFDSSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMvQixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFD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Q0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhRWxlbWVudCB9IGZyb20gXCIuLi9pbnB1dC5qc1wiO1xuaW1wb3J0IHsgTm9uZSwgT3B0aW9uLCBTb21lIH0gZnJvbSBcIi4uL2NvcmUvb3B0aW9uLmpzXCI7XG5pbXBvcnQgeyBlbW9qaSwgcmVzdWx0VG9Db2xvciwgcmVzdWx0VG9NYXJrZG93biB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5pbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL2NvbnZlcnRlci5qc1wiO1xuXG5jbGFzcyBUZXN0Q292ZXJhZ2VDb252ZXJ0ZXIgaW1wbGVtZW50cyBDb252ZXJ0ZXIge1xuICBjb252ZXJ0SGVhZGVyKGhlYWRlcjogRGF0YUVsZW1lbnQpOiBPcHRpb248c3RyaW5nPiB7XG4gICAgaWYgKGhlYWRlci5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiKSB7XG4gICAgICBjb25zdCBmID0gZW1vamkoaGVhZGVyLmRhdGEucmVzdWx0KTtcbiAgICAgIGNvbnN0IGggPSBgIyMgJHtmfSAgJHtoZWFkZXIubmFtZX1cXG5gO1xuICAgICAgY29uc3QgY292ZXJhZ2UgPSBgXG58IFR5cGUgfCBDb3ZlcmFnZSB8XG58IC0tLS0gfCAtLS0tLS0tLSB8XG58IExpbmUgfCAke2hlYWRlci5kYXRhLmxpbmUudG9GaXhlZCgyKX0lIHxcbnwgU3RhdGVtZW50IHwgJHtoZWFkZXIuZGF0YS5zdGF0ZW1lbnQudG9GaXhlZCgyKX0lIHxcbnwgRnVuY3Rpb24gfCAke2hlYWRlci5kYXRhLmZ1bmN0aW9uLnRvRml4ZWQoMil9JSB8XG58IEJyYW5jaCB8ICR7aGVhZGVyLmRhdGEuYnJhbmNoLnRvRml4ZWQoMil9JSB8XG5gO1xuICAgICAgY29uc3QgZGlmZiA9IGhlYWRlci5kYXRhLmRlbHRhO1xuICAgICAgY29uc3QgZEVtb2ppID0gKGQ6IG51bWJlcikgPT4gKGQgPiAwID8gXCLij6tcIiA6IFwi4o+sXCIpO1xuICAgICAgY29uc3QgZGVsdGEgPVxuICAgICAgICBkaWZmID09IG51bGxcbiAgICAgICAgICA/IGNvdmVyYWdlXG4gICAgICAgICAgOiBgXG58IFR5cGUgfCBDb3ZlcmFnZSB8IERlbHRhIHxcbnwgLS0tLSB8IC0tLS0tLS0tIHwgLS0tLS0gfFxufCBMaW5lIHwgJHtoZWFkZXIuZGF0YS5saW5lLnRvRml4ZWQoMil9JSB8ICR7ZGlmZi5saW5lLnRvRml4ZWQoMil9JSAke2RFbW9qaShcbiAgICAgICAgICAgICAgZGlmZi5saW5lXG4gICAgICAgICAgICApfSB8XG58IFN0YXRlbWVudCB8ICR7aGVhZGVyLmRhdGEuc3RhdGVtZW50LnRvRml4ZWQoMil9JSB8ICR7ZGlmZi5zdGF0ZW1lbnQudG9GaXhlZChcbiAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgKX0lICR7ZEVtb2ppKGRpZmYuc3RhdGVtZW50KX0gfFxufCBGdW5jdGlvbiB8ICR7aGVhZGVyLmRhdGEuZnVuY3Rpb24udG9GaXhlZCgyKX0lIHwgJHtkaWZmLmZ1bmN0aW9uLnRvRml4ZWQoXG4gICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICl9JSAke2RFbW9qaShkaWZmLmZ1bmN0aW9uKX0gfFxufCBCcmFuY2ggfCAke2hlYWRlci5kYXRhLmJyYW5jaC50b0ZpeGVkKDIpfSUgfCAke2RpZmYuYnJhbmNoLnRvRml4ZWQoXG4gICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICl9JSAke2RFbW9qaShkaWZmLmJyYW5jaCl9IHxcbmA7XG5cbiAgICAgIGNvbnN0IHBvbGljeSA9IHJlc3VsdFRvTWFya2Rvd24oaGVhZGVyLmRhdGEucmVzdWx0RGV0YWlscyk7XG4gICAgICByZXR1cm4gU29tZShgXG4ke2h9XG5SZXBvcnQ6IFtDb3ZlcmFnZV0oJHtoZWFkZXIudXJsfSlcbiR7ZGVsdGF9XG4ke3BvbGljeX1cbmApO1xuICAgIH1cbiAgICByZXR1cm4gTm9uZSgpO1xuICB9XG5cbiAgY29udmVydFRhYmxlKHRhYmxlOiBEYXRhRWxlbWVudCk6IE9wdGlvbjxzdHJpbmc+IHtcbiAgICBpZiAodGFibGUuZGF0YS50eXBlID09PSBcInRlc3QtY292ZXJhZ2VcIikge1xuICAgICAgY29uc3QgY29sb3IgPSByZXN1bHRUb0NvbG9yKHRhYmxlLmRhdGEucmVzdWx0KTtcbiAgICAgIGNvbnN0IGQgPSB0YWJsZS5kYXRhO1xuICAgICAgLy8g4piyIDEwMCUgfCDiiKwgOTAuMiUgfCDwn5yJIDI1LjUlXG4gICAgICByZXR1cm4gU29tZShcbiAgICAgICAgYFshW2JhZGdlXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL2NvdmVyYWdlYCArXG4gICAgICAgICAgYC0lRTIlOTglQjIlMjAke2Quc3RhdGVtZW50LnRvRml4ZWQoXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKX0lMjUlMjAlN0MlMjAlRTIlODglQUMlMjAke2QuZnVuY3Rpb24udG9GaXhlZChcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApfSUyNSUyMCU3QyUyMCVGMCU5RiU5QyU4OSUyMCR7ZC5icmFuY2gudG9GaXhlZCgxKX0lMjVgICtcbiAgICAgICAgICBgLSR7Y29sb3J9KV0oJHt0YWJsZS51cmx9KWBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBOb25lKCk7XG4gIH1cblxuICBjb252ZXJ0QmFkZ2UoYmFkZ2U6IERhdGFFbGVtZW50KTogT3B0aW9uPHN0cmluZz4ge1xuICAgIGlmIChiYWRnZS5kYXRhLnR5cGUgPT09IFwidGVzdC1jb3ZlcmFnZVwiKSB7XG4gICAgICBjb25zdCBjb2xvciA9IHJlc3VsdFRvQ29sb3IoYmFkZ2UuZGF0YS5yZXN1bHQpO1xuICAgICAgY29uc3QgZCA9IGJhZGdlLmRhdGE7XG4gICAgICAvLyDimLIgMTAwJSB8IOKIrCA5MC4yJSB8IPCfnIkgMjUuNSVcbiAgICAgIHJldHVybiBTb21lKFxuICAgICAgICBgWyFbYmFkZ2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvJHtiYWRnZS5uYW1lfWAgK1xuICAgICAgICAgIGAtJUUyJTk4JUIyJTIwJHtkLnN0YXRlbWVudC50b0ZpeGVkKFxuICAgICAgICAgICAgMVxuICAgICAgICAgICl9JTI1JTIwJTdDJTIwJUUyJTg4JUFDJTIwJHtkLmZ1bmN0aW9uLnRvRml4ZWQoXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKX0lMjUlMjAlN0MlMjAlRjAlOUYlOUMlODklMjAke2QuYnJhbmNoLnRvRml4ZWQoMSl9JTI1YCArXG4gICAgICAgICAgYC0ke2NvbG9yfSldKCR7YmFkZ2UudXJsfSlgXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gTm9uZSgpO1xuICB9XG59XG5cbmV4cG9ydCB7IFRlc3RDb3ZlcmFnZUNvbnZlcnRlciB9O1xuIl19