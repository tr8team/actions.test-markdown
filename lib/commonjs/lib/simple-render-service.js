import { Err, Ok, Res } from "./core/result.js";
class SimpleRenderService {
    #converters;
    #table;
    constructor(converters, table) {
        this.#converters = converters;
        this.#table = table;
    }
    itemToHeader(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertHeader(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    render(input) {
        const headers = input.current.items.map((x) => this.itemToHeader(x));
        const header = Res.all(...headers).map((x) => x.join("\n\n"));
        const table = this.#table.generateTable(input.history);
        return header.andThen((currentMarkdown) => table.map((historyMarkdown) => ({ currentMarkdown, historyMarkdown })));
    }
}
export { SimpleRenderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXJlbmRlci1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zaW1wbGUtcmVuZGVyLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFVLE1BQU0sa0JBQWtCLENBQUM7QUFNeEQsTUFBTSxtQkFBbUI7SUFDZCxXQUFXLENBQWM7SUFDekIsTUFBTSxDQUFpQjtJQUVoQyxZQUFZLFVBQXVCLEVBQUUsS0FBcUI7UUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFpQjtRQUM1QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUM1RCxDQUFDO1lBQ0YsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ2xCLE9BQU8sR0FBRyxDQUNSLElBQUksS0FBSyxDQUFDLCtCQUErQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQzNELENBQUM7aUJBQ0g7Z0JBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBVyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWtCO1FBQ3ZCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU5RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkQsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FDeEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQXVCLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUMvRSxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25JbnB1dCwgRGF0YUVsZW1lbnQgfSBmcm9tIFwiLi9pbnB1dC5qc1wiO1xuaW1wb3J0IHsgRXJyLCBPaywgUmVzLCBSZXN1bHQgfSBmcm9tIFwiLi9jb3JlL3Jlc3VsdC5qc1wiO1xuaW1wb3J0IHsgUmVuZGVyU2VydmljZSB9IGZyb20gXCIuL2ludGVyZmFjZS9zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2UvY29udmVydGVyLmpzXCI7XG5pbXBvcnQgeyBUYWJsZUdlbmVyYXRvciB9IGZyb20gXCIuL2ludGVyZmFjZS90YWJsZS1nZW5lcmF0b3IuanNcIjtcbmltcG9ydCB7IE91dHB1dCB9IGZyb20gXCIuL291dHB1dC5qc1wiO1xuXG5jbGFzcyBTaW1wbGVSZW5kZXJTZXJ2aWNlIGltcGxlbWVudHMgUmVuZGVyU2VydmljZSB7XG4gIHJlYWRvbmx5ICNjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXTtcbiAgcmVhZG9ubHkgI3RhYmxlOiBUYWJsZUdlbmVyYXRvcjtcblxuICBjb25zdHJ1Y3Rvcihjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXSwgdGFibGU6IFRhYmxlR2VuZXJhdG9yKSB7XG4gICAgdGhpcy4jY29udmVydGVycyA9IGNvbnZlcnRlcnM7XG4gICAgdGhpcy4jdGFibGUgPSB0YWJsZTtcbiAgfVxuXG4gIGl0ZW1Ub0hlYWRlcihpdGVtOiBEYXRhRWxlbWVudCk6IFJlc3VsdDxzdHJpbmcsIEVycm9yPiB7XG4gICAgcmV0dXJuIFJlcy5hc3luYyhhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb252ZXJ0ZWQgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgdGhpcy4jY29udmVydGVycy5tYXAoKGMpID0+IGMuY29udmVydEhlYWRlcihpdGVtKS5uYXRpdmUoKSlcbiAgICAgICk7XG4gICAgICBjb25zdCB0b3AgPSBjb252ZXJ0ZWQuZmlsdGVyKCh4KSA9PiB4ICE9IG51bGwpO1xuICAgICAgaWYgKHRvcC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgaWYgKHRvcC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIEVycihcbiAgICAgICAgICAgIG5ldyBFcnJvcihgTXVsdGlwbGUgY29udmVydGVycyBtYXRjaGVkICR7aXRlbS5kYXRhLnR5cGV9YClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFcnIobmV3IEVycm9yKGBObyBjb252ZXJ0ZXJzIG1hdGNoZWQgJHtpdGVtLmRhdGEudHlwZX1gKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2sodG9wWzBdIGFzIHN0cmluZyk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoaW5wdXQ6IEFjdGlvbklucHV0KTogUmVzdWx0PE91dHB1dCwgRXJyb3JbXT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBpbnB1dC5jdXJyZW50Lml0ZW1zLm1hcCgoeCkgPT4gdGhpcy5pdGVtVG9IZWFkZXIoeCkpO1xuICAgIGNvbnN0IGhlYWRlciA9IFJlcy5hbGwoLi4uaGVhZGVycykubWFwKCh4KSA9PiB4LmpvaW4oXCJcXG5cXG5cIikpO1xuXG4gICAgY29uc3QgdGFibGUgPSB0aGlzLiN0YWJsZS5nZW5lcmF0ZVRhYmxlKGlucHV0Lmhpc3RvcnkpO1xuICAgIHJldHVybiBoZWFkZXIuYW5kVGhlbigoY3VycmVudE1hcmtkb3duKSA9PlxuICAgICAgdGFibGUubWFwKChoaXN0b3J5TWFya2Rvd246IHN0cmluZykgPT4gKHsgY3VycmVudE1hcmtkb3duLCBoaXN0b3J5TWFya2Rvd24gfSkpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBTaW1wbGVSZW5kZXJTZXJ2aWNlIH07XG4iXX0=
