import { Err, Ok, Res } from "./core/result.js";
class SimpleRenderService {
    #converters;
    #table;
    constructor(converters, table) {
        this.#converters = converters;
        this.#table = table;
    }
    itemToHeader(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertHeader(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    itemToBadge(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertBadge(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    render(input) {
        // build headers
        const headers = input.current.items.map((x) => this.itemToHeader(x));
        const header = Res.all(...headers).map((x) => x.join("\n\n"));
        // build badges
        const badges = input.current.items.map((x) => this.itemToBadge(x));
        const badge = Res.all(...badges).map((x) => x.join(" "));
        const table = this.#table.generateTable(input.history);
        return header.andThen((currentMarkdown) => badge.andThen((badgeMarkdown) => table.map((historyMarkdown) => ({
            currentMarkdown,
            historyMarkdown,
            badges: badgeMarkdown,
        }))));
    }
}
export { SimpleRenderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXJlbmRlci1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zaW1wbGUtcmVuZGVyLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFVLE1BQU0sa0JBQWtCLENBQUM7QUFNeEQsTUFBTSxtQkFBbUI7SUFDZCxXQUFXLENBQWM7SUFDekIsTUFBTSxDQUFpQjtJQUVoQyxZQUFZLFVBQXVCLEVBQUUsS0FBcUI7UUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFpQjtRQUM1QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUM1RCxDQUFDO1lBQ0YsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ2xCLE9BQU8sR0FBRyxDQUNSLElBQUksS0FBSyxDQUFDLCtCQUErQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQzNELENBQUM7aUJBQ0g7Z0JBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBVyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQWlCO1FBQzNCLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMxQixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQzNELENBQUM7WUFDRixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDL0MsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxHQUFHLENBQ1IsSUFBSSxLQUFLLENBQUMsK0JBQStCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDM0QsQ0FBQztpQkFDSDtnQkFDRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDbEU7WUFDRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBa0I7UUFDdkIsZ0JBQWdCO1FBQ2hCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU5RCxlQUFlO1FBQ2YsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXpELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUN4QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FDOUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQXVCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdEMsZUFBZTtZQUNmLGVBQWU7WUFDZixNQUFNLEVBQUUsYUFBYTtTQUN0QixDQUFDLENBQUMsQ0FDSixDQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbklucHV0LCBEYXRhRWxlbWVudCB9IGZyb20gXCIuL2lucHV0LmpzXCI7XG5pbXBvcnQgeyBFcnIsIE9rLCBSZXMsIFJlc3VsdCB9IGZyb20gXCIuL2NvcmUvcmVzdWx0LmpzXCI7XG5pbXBvcnQgeyBSZW5kZXJTZXJ2aWNlIH0gZnJvbSBcIi4vaW50ZXJmYWNlL3NlcnZpY2UuanNcIjtcbmltcG9ydCB7IENvbnZlcnRlciB9IGZyb20gXCIuL2ludGVyZmFjZS9jb252ZXJ0ZXIuanNcIjtcbmltcG9ydCB7IFRhYmxlR2VuZXJhdG9yIH0gZnJvbSBcIi4vaW50ZXJmYWNlL3RhYmxlLWdlbmVyYXRvci5qc1wiO1xuaW1wb3J0IHsgT3V0cHV0IH0gZnJvbSBcIi4vb3V0cHV0LmpzXCI7XG5cbmNsYXNzIFNpbXBsZVJlbmRlclNlcnZpY2UgaW1wbGVtZW50cyBSZW5kZXJTZXJ2aWNlIHtcbiAgcmVhZG9ubHkgI2NvbnZlcnRlcnM6IENvbnZlcnRlcltdO1xuICByZWFkb25seSAjdGFibGU6IFRhYmxlR2VuZXJhdG9yO1xuXG4gIGNvbnN0cnVjdG9yKGNvbnZlcnRlcnM6IENvbnZlcnRlcltdLCB0YWJsZTogVGFibGVHZW5lcmF0b3IpIHtcbiAgICB0aGlzLiNjb252ZXJ0ZXJzID0gY29udmVydGVycztcbiAgICB0aGlzLiN0YWJsZSA9IHRhYmxlO1xuICB9XG5cbiAgaXRlbVRvSGVhZGVyKGl0ZW06IERhdGFFbGVtZW50KTogUmVzdWx0PHN0cmluZywgRXJyb3I+IHtcbiAgICByZXR1cm4gUmVzLmFzeW5jKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICB0aGlzLiNjb252ZXJ0ZXJzLm1hcCgoYykgPT4gYy5jb252ZXJ0SGVhZGVyKGl0ZW0pLm5hdGl2ZSgpKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHRvcCA9IGNvbnZlcnRlZC5maWx0ZXIoKHgpID0+IHggIT0gbnVsbCk7XG4gICAgICBpZiAodG9wLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICBpZiAodG9wLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gRXJyKFxuICAgICAgICAgICAgbmV3IEVycm9yKGBNdWx0aXBsZSBjb252ZXJ0ZXJzIG1hdGNoZWQgJHtpdGVtLmRhdGEudHlwZX1gKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVycihuZXcgRXJyb3IoYE5vIGNvbnZlcnRlcnMgbWF0Y2hlZCAke2l0ZW0uZGF0YS50eXBlfWApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPayh0b3BbMF0gYXMgc3RyaW5nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGl0ZW1Ub0JhZGdlKGl0ZW06IERhdGFFbGVtZW50KTogUmVzdWx0PHN0cmluZywgRXJyb3I+IHtcbiAgICByZXR1cm4gUmVzLmFzeW5jKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICB0aGlzLiNjb252ZXJ0ZXJzLm1hcCgoYykgPT4gYy5jb252ZXJ0QmFkZ2UoaXRlbSkubmF0aXZlKCkpXG4gICAgICApO1xuICAgICAgY29uc3QgdG9wID0gY29udmVydGVkLmZpbHRlcigoeCkgPT4geCAhPSBudWxsKTtcbiAgICAgIGlmICh0b3AubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIGlmICh0b3AubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJldHVybiBFcnIoXG4gICAgICAgICAgICBuZXcgRXJyb3IoYE11bHRpcGxlIGNvbnZlcnRlcnMgbWF0Y2hlZCAke2l0ZW0uZGF0YS50eXBlfWApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRXJyKG5ldyBFcnJvcihgTm8gY29udmVydGVycyBtYXRjaGVkICR7aXRlbS5kYXRhLnR5cGV9YCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9rKHRvcFswXSBhcyBzdHJpbmcpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKGlucHV0OiBBY3Rpb25JbnB1dCk6IFJlc3VsdDxPdXRwdXQsIEVycm9yW10+IHtcbiAgICAvLyBidWlsZCBoZWFkZXJzXG4gICAgY29uc3QgaGVhZGVycyA9IGlucHV0LmN1cnJlbnQuaXRlbXMubWFwKCh4KSA9PiB0aGlzLml0ZW1Ub0hlYWRlcih4KSk7XG4gICAgY29uc3QgaGVhZGVyID0gUmVzLmFsbCguLi5oZWFkZXJzKS5tYXAoKHgpID0+IHguam9pbihcIlxcblxcblwiKSk7XG5cbiAgICAvLyBidWlsZCBiYWRnZXNcbiAgICBjb25zdCBiYWRnZXMgPSBpbnB1dC5jdXJyZW50Lml0ZW1zLm1hcCgoeCkgPT4gdGhpcy5pdGVtVG9CYWRnZSh4KSk7XG4gICAgY29uc3QgYmFkZ2UgPSBSZXMuYWxsKC4uLmJhZGdlcykubWFwKCh4KSA9PiB4LmpvaW4oXCIgXCIpKTtcblxuICAgIGNvbnN0IHRhYmxlID0gdGhpcy4jdGFibGUuZ2VuZXJhdGVUYWJsZShpbnB1dC5oaXN0b3J5KTtcbiAgICByZXR1cm4gaGVhZGVyLmFuZFRoZW4oKGN1cnJlbnRNYXJrZG93bikgPT5cbiAgICAgIGJhZGdlLmFuZFRoZW4oKGJhZGdlTWFya2Rvd24pID0+XG4gICAgICAgIHRhYmxlLm1hcCgoaGlzdG9yeU1hcmtkb3duOiBzdHJpbmcpID0+ICh7XG4gICAgICAgICAgY3VycmVudE1hcmtkb3duLFxuICAgICAgICAgIGhpc3RvcnlNYXJrZG93bixcbiAgICAgICAgICBiYWRnZXM6IGJhZGdlTWFya2Rvd24sXG4gICAgICAgIH0pKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2ltcGxlUmVuZGVyU2VydmljZSB9O1xuIl19