import { array, discriminatedUnion, literal, number, object, optional, string, union } from "zod";
// Policies
const policyResult = union([literal("pass"), literal("warn"), literal("fail")]);
const policyData = object({
    pass: array(string()),
    warn: array(string()),
    fail: array(string())
});
const base = object({
    result: policyResult,
    resultDetails: policyData
});
// Meta data
const testResultMetadata = base
    .extend({
    type: literal("test-result"),
    pass: number().min(0),
    fail: number().min(0),
    skip: number().min(0)
})
    .strict();
const documentationMetadata = base
    .extend({
    type: literal("documentation")
})
    .strict();
const codeQualityMetadata = base
    .extend({
    type: literal("code-quality"),
    qualityRating: string()
})
    .strict();
const testCoverageMetadata = base
    .extend({
    type: literal("test-coverage"),
    delta: optional(object({
        line: number().min(-100).max(100),
        statement: number().min(-100).max(100),
        function: number().min(-100).max(100),
        branch: number().min(-100).max(100)
    }).strict().nullable()),
    line: number().min(0).max(100),
    statement: number().min(0).max(100),
    function: number().min(0).max(100),
    branch: number().min(0).max(100)
})
    .strict();
const metadata = discriminatedUnion("type", [
    codeQualityMetadata,
    documentationMetadata,
    testCoverageMetadata,
    testResultMetadata
]);
// input object
const dataElement = object({
    name: string(),
    url: string().url(),
    data: metadata
}).strict();
const dataElementArray = array(dataElement);
const historyEntry = object({
    sha: string(),
    url: string(),
    action: string(),
    items: dataElementArray
}).strict();
const history = array(historyEntry);
export { metadata, dataElement, dataElementArray, historyEntry, history };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUssTUFBTSxLQUFLLENBQUM7QUFFckcsV0FBVztBQUNYLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVoRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7SUFDeEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNyQixJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3JCLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7Q0FDdEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ2xCLE1BQU0sRUFBRSxZQUFZO0lBQ3BCLGFBQWEsRUFBRSxVQUFVO0NBQzFCLENBQUMsQ0FBQztBQUVILFlBQVk7QUFFWixNQUFNLGtCQUFrQixHQUFHLElBQUk7S0FDNUIsTUFBTSxDQUFDO0lBQ04sSUFBSSxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDNUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdEIsQ0FBQztLQUNELE1BQU0sRUFBRSxDQUFDO0FBRVosTUFBTSxxQkFBcUIsR0FBRyxJQUFJO0tBQy9CLE1BQU0sQ0FBQztJQUNOLElBQUksRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO0NBQy9CLENBQUM7S0FDRCxNQUFNLEVBQUUsQ0FBQztBQUVaLE1BQU0sbUJBQW1CLEdBQUcsSUFBSTtLQUM3QixNQUFNLENBQUM7SUFDTixJQUFJLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUM3QixhQUFhLEVBQUUsTUFBTSxFQUFFO0NBQ3hCLENBQUM7S0FDRCxNQUFNLEVBQUUsQ0FBQztBQUNaLE1BQU0sb0JBQW9CLEdBQUcsSUFBSTtLQUM5QixNQUFNLENBQUM7SUFDTixJQUFJLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUM5QixLQUFLLEVBQUUsUUFBUSxDQUNiLE1BQU0sQ0FBQztRQUNMLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ2pDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3RDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0tBQ3BDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FDdkI7SUFDRCxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDOUIsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ25DLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNsQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7Q0FDakMsQ0FBQztLQUNELE1BQU0sRUFBRSxDQUFDO0FBRVosTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxFQUFFO0lBQzFDLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtDQUNuQixDQUFDLENBQUM7QUFFSCxlQUFlO0FBRWYsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDZCxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQ25CLElBQUksRUFBRSxRQUFRO0NBQ2YsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRVosTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFNUMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQzFCLEdBQUcsRUFBRSxNQUFNLEVBQUU7SUFDYixHQUFHLEVBQUUsTUFBTSxFQUFFO0lBQ2IsTUFBTSxFQUFFLE1BQU0sRUFBRTtJQUNoQixLQUFLLEVBQUUsZ0JBQWdCO0NBQ3hCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVaLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQWVwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcnJheSwgZGlzY3JpbWluYXRlZFVuaW9uLCBsaXRlcmFsLCBudW1iZXIsIG9iamVjdCwgb3B0aW9uYWwsIHN0cmluZywgdW5pb24sIHogfSBmcm9tIFwiem9kXCI7XG5cbi8vIFBvbGljaWVzXG5jb25zdCBwb2xpY3lSZXN1bHQgPSB1bmlvbihbbGl0ZXJhbChcInBhc3NcIiksIGxpdGVyYWwoXCJ3YXJuXCIpLCBsaXRlcmFsKFwiZmFpbFwiKV0pO1xuXG5jb25zdCBwb2xpY3lEYXRhID0gb2JqZWN0KHtcbiAgcGFzczogYXJyYXkoc3RyaW5nKCkpLFxuICB3YXJuOiBhcnJheShzdHJpbmcoKSksXG4gIGZhaWw6IGFycmF5KHN0cmluZygpKVxufSk7XG5cbmNvbnN0IGJhc2UgPSBvYmplY3Qoe1xuICByZXN1bHQ6IHBvbGljeVJlc3VsdCxcbiAgcmVzdWx0RGV0YWlsczogcG9saWN5RGF0YVxufSk7XG5cbi8vIE1ldGEgZGF0YVxuXG5jb25zdCB0ZXN0UmVzdWx0TWV0YWRhdGEgPSBiYXNlXG4gIC5leHRlbmQoe1xuICAgIHR5cGU6IGxpdGVyYWwoXCJ0ZXN0LXJlc3VsdFwiKSxcbiAgICBwYXNzOiBudW1iZXIoKS5taW4oMCksXG4gICAgZmFpbDogbnVtYmVyKCkubWluKDApLFxuICAgIHNraXA6IG51bWJlcigpLm1pbigwKVxuICB9KVxuICAuc3RyaWN0KCk7XG5cbmNvbnN0IGRvY3VtZW50YXRpb25NZXRhZGF0YSA9IGJhc2VcbiAgLmV4dGVuZCh7XG4gICAgdHlwZTogbGl0ZXJhbChcImRvY3VtZW50YXRpb25cIilcbiAgfSlcbiAgLnN0cmljdCgpO1xuXG5jb25zdCBjb2RlUXVhbGl0eU1ldGFkYXRhID0gYmFzZVxuICAuZXh0ZW5kKHtcbiAgICB0eXBlOiBsaXRlcmFsKFwiY29kZS1xdWFsaXR5XCIpLFxuICAgIHF1YWxpdHlSYXRpbmc6IHN0cmluZygpXG4gIH0pXG4gIC5zdHJpY3QoKTtcbmNvbnN0IHRlc3RDb3ZlcmFnZU1ldGFkYXRhID0gYmFzZVxuICAuZXh0ZW5kKHtcbiAgICB0eXBlOiBsaXRlcmFsKFwidGVzdC1jb3ZlcmFnZVwiKSxcbiAgICBkZWx0YTogb3B0aW9uYWwoXG4gICAgICBvYmplY3Qoe1xuICAgICAgICBsaW5lOiBudW1iZXIoKS5taW4oLTEwMCkubWF4KDEwMCksXG4gICAgICAgIHN0YXRlbWVudDogbnVtYmVyKCkubWluKC0xMDApLm1heCgxMDApLFxuICAgICAgICBmdW5jdGlvbjogbnVtYmVyKCkubWluKC0xMDApLm1heCgxMDApLFxuICAgICAgICBicmFuY2g6IG51bWJlcigpLm1pbigtMTAwKS5tYXgoMTAwKVxuICAgICAgfSkuc3RyaWN0KCkubnVsbGFibGUoKVxuICAgICksXG4gICAgbGluZTogbnVtYmVyKCkubWluKDApLm1heCgxMDApLFxuICAgIHN0YXRlbWVudDogbnVtYmVyKCkubWluKDApLm1heCgxMDApLFxuICAgIGZ1bmN0aW9uOiBudW1iZXIoKS5taW4oMCkubWF4KDEwMCksXG4gICAgYnJhbmNoOiBudW1iZXIoKS5taW4oMCkubWF4KDEwMClcbiAgfSlcbiAgLnN0cmljdCgpO1xuXG5jb25zdCBtZXRhZGF0YSA9IGRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICBjb2RlUXVhbGl0eU1ldGFkYXRhLFxuICBkb2N1bWVudGF0aW9uTWV0YWRhdGEsXG4gIHRlc3RDb3ZlcmFnZU1ldGFkYXRhLFxuICB0ZXN0UmVzdWx0TWV0YWRhdGFcbl0pO1xuXG4vLyBpbnB1dCBvYmplY3RcblxuY29uc3QgZGF0YUVsZW1lbnQgPSBvYmplY3Qoe1xuICBuYW1lOiBzdHJpbmcoKSxcbiAgdXJsOiBzdHJpbmcoKS51cmwoKSxcbiAgZGF0YTogbWV0YWRhdGFcbn0pLnN0cmljdCgpO1xuXG5jb25zdCBkYXRhRWxlbWVudEFycmF5ID0gYXJyYXkoZGF0YUVsZW1lbnQpO1xuXG5jb25zdCBoaXN0b3J5RW50cnkgPSBvYmplY3Qoe1xuICBzaGE6IHN0cmluZygpLFxuICB1cmw6IHN0cmluZygpLFxuICBhY3Rpb246IHN0cmluZygpLFxuICBpdGVtczogZGF0YUVsZW1lbnRBcnJheVxufSkuc3RyaWN0KCk7XG5cbmNvbnN0IGhpc3RvcnkgPSBhcnJheShoaXN0b3J5RW50cnkpO1xuXG50eXBlIERhdGFFbGVtZW50ID0gei5pbmZlcjx0eXBlb2YgZGF0YUVsZW1lbnQ+O1xuZGVjbGFyZSBsZXQgeDogRGF0YUVsZW1lbnQ7XG50eXBlIE1ldGFkYXRhRW51bSA9IHR5cGVvZiB4LmRhdGEudHlwZTtcbnR5cGUgRGF0YUVsZW1lbnRBcnJheSA9IHouaW5mZXI8dHlwZW9mIGRhdGFFbGVtZW50QXJyYXk+O1xudHlwZSBIaXN0b3J5RW50cnkgPSB6LmluZmVyPHR5cGVvZiBoaXN0b3J5RW50cnk+O1xudHlwZSBIaXN0b3J5ID0gei5pbmZlcjx0eXBlb2YgaGlzdG9yeT47XG50eXBlIFBvbGljeVJlc3VsdCA9IHouaW5mZXI8dHlwZW9mIHBvbGljeVJlc3VsdD47XG50eXBlIFBvbGljeURhdGEgPSB6LmluZmVyPHR5cGVvZiBwb2xpY3lEYXRhPjtcbnR5cGUgQWN0aW9uSW5wdXQgPSB7XG4gIGN1cnJlbnQ6IEhpc3RvcnlFbnRyeTtcbiAgaGlzdG9yeTogSGlzdG9yeTtcbn07XG5cbmV4cG9ydCB7IG1ldGFkYXRhLCBkYXRhRWxlbWVudCwgZGF0YUVsZW1lbnRBcnJheSwgaGlzdG9yeUVudHJ5LCBoaXN0b3J5IH07XG5cbmV4cG9ydCB0eXBlIHtcbiAgQWN0aW9uSW5wdXQsXG4gIFBvbGljeURhdGEsXG4gIE1ldGFkYXRhRW51bSxcbiAgRGF0YUVsZW1lbnQsXG4gIERhdGFFbGVtZW50QXJyYXksXG4gIEhpc3RvcnlFbnRyeSxcbiAgUG9saWN5UmVzdWx0LFxuICBIaXN0b3J5XG59O1xuIl19
