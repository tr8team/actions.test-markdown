import { Err, Ok, Res } from "./core/result.js";
class SimpleTableGenerator {
    #converters;
    constructor(converters, k) {
        this.#converters = converters;
        k.AssertExtend();
    }
    getHeaders(input) {
        return input
            .map((x) => x.items.map((y) => y.name))
            .flat(1)
            .Unique();
    }
    itemToElement(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertTable(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    buildTableRow(headers, h) {
        const rowResultRaw = headers.map((header) => {
            const r = h.items.find((x) => x.name === header);
            if (r == null) {
                return Ok("`-`");
            }
            return this.itemToElement(r);
        });
        return Res.all(...rowResultRaw)
            .map((x) => [
            `[${h.sha.Take(6)}](${h.url})`,
            `[Action](${h.action})`,
            ...x
        ])
            .map((x) => `|${x.join(" | ")} |`);
    }
    buildHeaderRow(h) {
        const headers = ["Commit", "Action", ...h];
        const headerRow1 = `${headers.map((header) => `| ${header} `).join("")}|\n`;
        const headerRow2 = `${headers
            .map((header) => `| ${"-".Repeat(header.length.AtMin(3))} `)
            .join("")}|\n`;
        return headerRow1 + headerRow2;
    }
    generateTable(input) {
        const headers = this.getHeaders(input);
        const headerRow = this.buildHeaderRow(headers);
        // build children
        const rowsResults = input.map((h) => this.buildTableRow(headers, h));
        return Res.all(...rowsResults)
            .map((x) => headerRow + x.join("\n"))
            .mapErr((x) => x.flat(1));
    }
}
export { SimpleTableGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXRhYmxlLWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2ltcGxlLXRhYmxlLWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQVUsTUFBTSxrQkFBa0IsQ0FBQztBQU14RCxNQUFNLG9CQUFvQjtJQUNmLFdBQVcsQ0FBYztJQUVsQyxZQUFZLFVBQXVCLEVBQUUsQ0FBTztRQUMxQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFjO1FBQ3ZCLE9BQU8sS0FBSzthQUNULEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ1AsTUFBTSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQWlCO1FBQzdCLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMxQixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQzNELENBQUM7WUFDRixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDL0MsSUFBSSxHQUFHLENBQUMsTUFB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LElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFFbGVtZW50LCBIaXN0b3J5RW50cnksIEhpc3RvcnkgfSBmcm9tIFwiLi9pbnB1dC5qc1wiO1xuaW1wb3J0IHsgRXJyLCBPaywgUmVzLCBSZXN1bHQgfSBmcm9tIFwiLi9jb3JlL3Jlc3VsdC5qc1wiO1xuaW1wb3J0IHsgQ29udmVydGVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlL2NvbnZlcnRlci5qc1wiO1xuaW1wb3J0IHsgVGFibGVHZW5lcmF0b3IgfSBmcm9tIFwiLi9pbnRlcmZhY2UvdGFibGUtZ2VuZXJhdG9yLmpzXCI7XG5pbXBvcnQgeyBDb3JlIH0gZnJvbSBcIkBraXJpbm5lZS9jb3JlXCI7XG5cblxuY2xhc3MgU2ltcGxlVGFibGVHZW5lcmF0b3IgaW1wbGVtZW50cyBUYWJsZUdlbmVyYXRvciB7XG4gIHJlYWRvbmx5ICNjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXTtcblxuICBjb25zdHJ1Y3Rvcihjb252ZXJ0ZXJzOiBDb252ZXJ0ZXJbXSwgazogQ29yZSkge1xuICAgIHRoaXMuI2NvbnZlcnRlcnMgPSBjb252ZXJ0ZXJzO1xuICAgIGsuQXNzZXJ0RXh0ZW5kKCk7XG4gIH1cblxuICBnZXRIZWFkZXJzKGlucHV0OiBIaXN0b3J5KTogc3RyaW5nW10ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgLm1hcCgoeCkgPT4geC5pdGVtcy5tYXAoKHkpID0+IHkubmFtZSkpXG4gICAgICAuZmxhdCgxKVxuICAgICAgLlVuaXF1ZSgpO1xuICB9XG5cbiAgaXRlbVRvRWxlbWVudChpdGVtOiBEYXRhRWxlbWVudCk6IFJlc3VsdDxzdHJpbmcsIEVycm9yPiB7XG4gICAgcmV0dXJuIFJlcy5hc3luYyhhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb252ZXJ0ZWQgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgdGhpcy4jY29udmVydGVycy5tYXAoKGMpID0+IGMuY29udmVydFRhYmxlKGl0ZW0pLm5hdGl2ZSgpKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHRvcCA9IGNvbnZlcnRlZC5maWx0ZXIoKHgpID0+IHggIT0gbnVsbCk7XG4gICAgICBpZiAodG9wLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICBpZiAodG9wLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gRXJyKFxuICAgICAgICAgICAgbmV3IEVycm9yKGBNdWx0aXBsZSBjb252ZXJ0ZXJzIG1hdGNoZWQgJHtpdGVtLmRhdGEudHlwZX1gKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVycihuZXcgRXJyb3IoYE5vIGNvbnZlcnRlcnMgbWF0Y2hlZCAke2l0ZW0uZGF0YS50eXBlfWApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPayh0b3BbMF0gYXMgc3RyaW5nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkVGFibGVSb3coaGVhZGVyczogc3RyaW5nW10sIGg6IEhpc3RvcnlFbnRyeSk6IFJlc3VsdDxzdHJpbmcsIEVycm9yW10+IHtcbiAgICBjb25zdCByb3dSZXN1bHRSYXcgPSBoZWFkZXJzLm1hcCgoaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCByID0gaC5pdGVtcy5maW5kKCh4KSA9PiB4Lm5hbWUgPT09IGhlYWRlcik7XG4gICAgICBpZiAociA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBPayhcImAtYFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLml0ZW1Ub0VsZW1lbnQocik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlcy5hbGwoLi4ucm93UmVzdWx0UmF3KVxuICAgICAgLm1hcCgoeCkgPT4gW1xuICAgICAgICBgWyR7aC5zaGEuVGFrZSg2KX1dKCR7aC51cmx9KWAsXG4gICAgICAgIGBbQWN0aW9uXSgke2guYWN0aW9ufSlgLFxuICAgICAgICAuLi54XG4gICAgICBdKVxuICAgICAgLm1hcCgoeCkgPT4gYHwke3guam9pbihcIiB8IFwiKX0gfGApO1xuICB9XG5cbiAgYnVpbGRIZWFkZXJSb3coaDogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBbXCJDb21taXRcIiwgXCJBY3Rpb25cIiwgLi4uaF07XG4gICAgY29uc3QgaGVhZGVyUm93MSA9IGAke2hlYWRlcnMubWFwKChoZWFkZXIpID0+IGB8ICR7aGVhZGVyfSBgKS5qb2luKFwiXCIpfXxcXG5gO1xuICAgIGNvbnN0IGhlYWRlclJvdzIgPSBgJHtoZWFkZXJzXG4gICAgICAubWFwKChoZWFkZXIpID0+IGB8ICR7XCItXCIuUmVwZWF0KGhlYWRlci5sZW5ndGguQXRNaW4oMykpfSBgKVxuICAgICAgLmpvaW4oXCJcIil9fFxcbmA7XG4gICAgcmV0dXJuIGhlYWRlclJvdzEgKyBoZWFkZXJSb3cyO1xuICB9XG5cbiAgZ2VuZXJhdGVUYWJsZShpbnB1dDogSGlzdG9yeSk6IFJlc3VsdDxzdHJpbmcsIEVycm9yW10+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKGlucHV0KTtcbiAgICBjb25zdCBoZWFkZXJSb3cgPSB0aGlzLmJ1aWxkSGVhZGVyUm93KGhlYWRlcnMpO1xuXG4gICAgLy8gYnVpbGQgY2hpbGRyZW5cbiAgICBjb25zdCByb3dzUmVzdWx0cyA9IGlucHV0Lm1hcCgoaCkgPT4gdGhpcy5idWlsZFRhYmxlUm93KGhlYWRlcnMsIGgpKTtcbiAgICByZXR1cm4gUmVzLmFsbCguLi5yb3dzUmVzdWx0cylcbiAgICAgIC5tYXAoKHgpID0+IGhlYWRlclJvdyArIHguam9pbihcIlxcblwiKSlcbiAgICAgIC5tYXBFcnIoKHgpID0+IHguZmxhdCgxKSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2ltcGxlVGFibGVHZW5lcmF0b3IgfTtcbiJdfQ==
