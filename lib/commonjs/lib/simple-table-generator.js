import { Err, Ok, Res } from "./core/result.js";
class SimpleTableGenerator {
    #converters;
    constructor(converters, k) {
        this.#converters = converters;
        k.AssertExtend();
    }
    getHeaders(input) {
        return input
            .map((x) => x.items.map((y) => y.name))
            .flat(1)
            .Unique();
    }
    itemToElement(item) {
        return Res.async(async () => {
            const converted = await Promise.all(this.#converters.map((c) => c.convertTable(item).native()));
            const top = converted.filter((x) => x != null);
            if (top.length !== 1) {
                if (top.length > 1) {
                    return Err(new Error(`Multiple converters matched ${item.data.type}`));
                }
                return Err(new Error(`No converters matched ${item.data.type}`));
            }
            return Ok(top[0]);
        });
    }
    buildTableRow(headers, h) {
        const rowResultRaw = headers.map((header) => {
            const r = h.items.find((x) => x.name === header);
            if (r == null) {
                return Ok("`-`");
            }
            return this.itemToElement(r);
        });
        return Res.all(...rowResultRaw)
            .map((x) => [
            `[${h.sha.Take(6)}](${h.url})`,
            `[Action](${h.action})`,
            ...x,
        ])
            .map((x) => `|${x.join(" | ")} |`);
    }
    buildHeaderRow(h) {
        const headers = ["Commit", "Action", ...h];
        const headerRow1 = `${headers.map((header) => `| ${header} `).join("")}|\n`;
        const headerRow2 = `${headers
            .map((header) => `| ${"-".Repeat(header.length.AtMin(3))} `)
            .join("")}|\n`;
        return headerRow1 + headerRow2;
    }
    generateTable(input) {
        const headers = this.getHeaders(input);
        const headerRow = this.buildHeaderRow(headers);
        // build children
        const rowsResults = input.map((h) => this.buildTableRow(headers, h));
        return Res.all(...rowsResults)
            .map((x) => headerRow + x.join("\n"))
            .mapErr((x) => x.flat(1));
    }
}
export { SimpleTableGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXRhYmxlLWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2ltcGxlLXRhYmxlLWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQVUsTUFBTSxrQkFBa0IsQ0FBQztBQUt4RCxNQUFNLG9CQUFvQjtJQUNmLFdBQVcsQ0FBYztJQUVsQyxZQUFZLFVBQXVCLEVBQUUsQ0FBTztRQUMxQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFjO1FBQ3ZCLE9BQU8sS0FBSzthQUNULEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ1AsTUFBTSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQWlCO1FBQzdCLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMxQixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQzNELENBQUM7WUFDRixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDL0MsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxHQUFHLENBQ1IsSUFBSSxLQUFLLENBQUMsK0JBQStCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDM0QsQ0FBQztpQkFDSDtnQkFDRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDbEU7WUFDRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBaUIsRUFBRSxDQUFlO1FBQzlDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQ2IsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEI7WUFDRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUM7YUFDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNWLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRztZQUM5QixZQUFZLENBQUMsQ0FBQyxNQUFNLEdBQUc7WUFDdkIsR0FBRyxDQUFDO1NBQ0wsQ0FBQzthQUNELEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsY0FBYyxDQUFDLENBQVc7UUFDeEIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxVQUFVLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDNUUsTUFBTSxVQUFVLEdBQUcsR0FBRyxPQUFPO2FBQzFCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQzthQUMzRCxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNqQixPQUFPLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFjO1FBQzFCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQyxpQkFBaUI7UUFDakIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUM7YUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFFbGVtZW50LCBIaXN0b3J5RW50cnksIEhpc3RvcnkgfSBmcm9tIFwiLi9pbnB1dC5qc1wiO1xuaW1wb3J0IHsgRXJyLCBPaywgUmVzLCBSZXN1bHQgfSBmcm9tIFwiLi9jb3JlL3Jlc3VsdC5qc1wiO1xuaW1wb3J0IHsgQ29udmVydGVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlL2NvbnZlcnRlci5qc1wiO1xuaW1wb3J0IHsgVGFibGVHZW5lcmF0b3IgfSBmcm9tIFwiLi9pbnRlcmZhY2UvdGFibGUtZ2VuZXJhdG9yLmpzXCI7XG5pbXBvcnQgeyBDb3JlIH0gZnJvbSBcIkBraXJpbm5lZS9jb3JlXCI7XG5cbmNsYXNzIFNpbXBsZVRhYmxlR2VuZXJhdG9yIGltcGxlbWVudHMgVGFibGVHZW5lcmF0b3Ige1xuICByZWFkb25seSAjY29udmVydGVyczogQ29udmVydGVyW107XG5cbiAgY29uc3RydWN0b3IoY29udmVydGVyczogQ29udmVydGVyW10sIGs6IENvcmUpIHtcbiAgICB0aGlzLiNjb252ZXJ0ZXJzID0gY29udmVydGVycztcbiAgICBrLkFzc2VydEV4dGVuZCgpO1xuICB9XG5cbiAgZ2V0SGVhZGVycyhpbnB1dDogSGlzdG9yeSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgIC5tYXAoKHgpID0+IHguaXRlbXMubWFwKCh5KSA9PiB5Lm5hbWUpKVxuICAgICAgLmZsYXQoMSlcbiAgICAgIC5VbmlxdWUoKTtcbiAgfVxuXG4gIGl0ZW1Ub0VsZW1lbnQoaXRlbTogRGF0YUVsZW1lbnQpOiBSZXN1bHQ8c3RyaW5nLCBFcnJvcj4ge1xuICAgIHJldHVybiBSZXMuYXN5bmMoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udmVydGVkID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHRoaXMuI2NvbnZlcnRlcnMubWFwKChjKSA9PiBjLmNvbnZlcnRUYWJsZShpdGVtKS5uYXRpdmUoKSlcbiAgICAgICk7XG4gICAgICBjb25zdCB0b3AgPSBjb252ZXJ0ZWQuZmlsdGVyKCh4KSA9PiB4ICE9IG51bGwpO1xuICAgICAgaWYgKHRvcC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgaWYgKHRvcC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIEVycihcbiAgICAgICAgICAgIG5ldyBFcnJvcihgTXVsdGlwbGUgY29udmVydGVycyBtYXRjaGVkICR7aXRlbS5kYXRhLnR5cGV9YClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFcnIobmV3IEVycm9yKGBObyBjb252ZXJ0ZXJzIG1hdGNoZWQgJHtpdGVtLmRhdGEudHlwZX1gKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2sodG9wWzBdIGFzIHN0cmluZyk7XG4gICAgfSk7XG4gIH1cblxuICBidWlsZFRhYmxlUm93KGhlYWRlcnM6IHN0cmluZ1tdLCBoOiBIaXN0b3J5RW50cnkpOiBSZXN1bHQ8c3RyaW5nLCBFcnJvcltdPiB7XG4gICAgY29uc3Qgcm93UmVzdWx0UmF3ID0gaGVhZGVycy5tYXAoKGhlYWRlcikgPT4ge1xuICAgICAgY29uc3QgciA9IGguaXRlbXMuZmluZCgoeCkgPT4geC5uYW1lID09PSBoZWFkZXIpO1xuICAgICAgaWYgKHIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gT2soXCJgLWBcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pdGVtVG9FbGVtZW50KHIpO1xuICAgIH0pO1xuICAgIHJldHVybiBSZXMuYWxsKC4uLnJvd1Jlc3VsdFJhdylcbiAgICAgIC5tYXAoKHgpID0+IFtcbiAgICAgICAgYFske2guc2hhLlRha2UoNil9XSgke2gudXJsfSlgLFxuICAgICAgICBgW0FjdGlvbl0oJHtoLmFjdGlvbn0pYCxcbiAgICAgICAgLi4ueCxcbiAgICAgIF0pXG4gICAgICAubWFwKCh4KSA9PiBgfCR7eC5qb2luKFwiIHwgXCIpfSB8YCk7XG4gIH1cblxuICBidWlsZEhlYWRlclJvdyhoOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgY29uc3QgaGVhZGVycyA9IFtcIkNvbW1pdFwiLCBcIkFjdGlvblwiLCAuLi5oXTtcbiAgICBjb25zdCBoZWFkZXJSb3cxID0gYCR7aGVhZGVycy5tYXAoKGhlYWRlcikgPT4gYHwgJHtoZWFkZXJ9IGApLmpvaW4oXCJcIil9fFxcbmA7XG4gICAgY29uc3QgaGVhZGVyUm93MiA9IGAke2hlYWRlcnNcbiAgICAgIC5tYXAoKGhlYWRlcikgPT4gYHwgJHtcIi1cIi5SZXBlYXQoaGVhZGVyLmxlbmd0aC5BdE1pbigzKSl9IGApXG4gICAgICAuam9pbihcIlwiKX18XFxuYDtcbiAgICByZXR1cm4gaGVhZGVyUm93MSArIGhlYWRlclJvdzI7XG4gIH1cblxuICBnZW5lcmF0ZVRhYmxlKGlucHV0OiBIaXN0b3J5KTogUmVzdWx0PHN0cmluZywgRXJyb3JbXT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmdldEhlYWRlcnMoaW5wdXQpO1xuICAgIGNvbnN0IGhlYWRlclJvdyA9IHRoaXMuYnVpbGRIZWFkZXJSb3coaGVhZGVycyk7XG5cbiAgICAvLyBidWlsZCBjaGlsZHJlblxuICAgIGNvbnN0IHJvd3NSZXN1bHRzID0gaW5wdXQubWFwKChoKSA9PiB0aGlzLmJ1aWxkVGFibGVSb3coaGVhZGVycywgaCkpO1xuICAgIHJldHVybiBSZXMuYWxsKC4uLnJvd3NSZXN1bHRzKVxuICAgICAgLm1hcCgoeCkgPT4gaGVhZGVyUm93ICsgeC5qb2luKFwiXFxuXCIpKVxuICAgICAgLm1hcEVycigoeCkgPT4geC5mbGF0KDEpKTtcbiAgfVxufVxuXG5leHBvcnQgeyBTaW1wbGVUYWJsZUdlbmVyYXRvciB9O1xuIl19